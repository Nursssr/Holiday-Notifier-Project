import os
import re
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from dotenv import load_dotenv
from sqlalchemy import select
from db import async_session
from models import User

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()


def _parse_birthday_arg(arg: str) -> date:
    if not arg:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞")

    cleaned = re.sub(r"[\/\.\-]", ".", arg.strip())
    parts = [p for p in cleaned.split(".") if p]

    if len(parts) == 2:
        d, m = parts
        y = 2000
    elif len(parts) == 3:
        d, m, y = parts
        if len(y) == 2:
            y = int(y)
            y = 2000 + y
        else:
            y = int(y)
    else:
        raise ValueError("–û–∂–∏–¥–∞—é —Ñ–æ—Ä–º–∞—Ç DD-MM –∏–ª–∏ DD-MM-YYYY")

    d = int(d)
    m = int(m)

    return date(year=y, month=m, day=d)


async def _get_or_create_user(tg_id: int, full_name: str) -> User:
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()
        if user:
            return user
        user = User(tg_id=tg_id, name=full_name)
        session.add(user)
        await session.commit()
        return user


@dp.message(CommandStart())
async def start(message: types.Message):
    await _get_or_create_user(message.from_user.id, message.from_user.full_name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! ‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_birthday 28-08-2000 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–† (–≥–æ–¥ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å)\n"
        "/my_birthday ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –î–†\n"
        "/clear_birthday ‚Äî —É–¥–∞–ª–∏—Ç—å –î–†\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )


@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ /set_birthday 28-08-2000 ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ 28-08 –±–µ–∑ –≥–æ–¥–∞)\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: '.', '-', '/'\n"
        "‚Ä¢ /my_birthday ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ /clear_birthday ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å–æ–≤–ø–∞–¥—É—Ç –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü. "
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã (—Å–º. .env)."
    )


@dp.message(Command("set_birthday"))
async def set_birthday(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ –¥–∞—Ç—É: –Ω–∞–ø—Ä–∏–º–µ—Ä, `/set_birthday 28-08-2000` –∏–ª–∏ `/set_birthday 28-08`",
                             parse_mode="Markdown")
        return

    raw_date = parts[1].strip()
    try:
        bday = _parse_birthday_arg(raw_date)
    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. {e}\n–ü—Ä–∏–º–µ—Ä—ã: `28-08-2000`, `28.08`, `28/08/05`",
                             parse_mode="Markdown")
        return

    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à—ë–ª /start
            user = User(tg_id=message.from_user.id, name=message.from_user.full_name)
            session.add(user)
            await session.flush()

        user.birthday = bday
        await session.commit()

    shown = bday.strftime("%d.%m")
    await message.answer(f"üéâ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {shown}")


@dp.message(Command("my_birthday"))
async def my_birthday(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()

        if not user or not user.birthday:
            await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏: `/set_birthday 28-08-2000`",
                                 parse_mode="Markdown")
            return

        shown = user.birthday.strftime("%d.%m")
        await message.answer(f"üìÖ –¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {shown}")


@dp.message(Command("clear_birthday"))
async def clear_birthday(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()

        if not user or not user.birthday:
            await message.answer("–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –î–† üôÇ")
            return

        user.birthday = None
        await session.commit()
    await message.answer("üßπ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞.")


# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –±–µ–∑ main.py)
if __name__ == "__main__":
    import asyncio
    async def _run():
        print("Bot polling started‚Ä¶")
        await dp.start_polling(bot)
    asyncio.run(_run())
